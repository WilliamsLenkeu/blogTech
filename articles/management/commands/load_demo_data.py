from django.core.management.base import BaseCommand
from django.contrib.auth.hashers import make_password
from django.utils import timezone
from datetime import timedelta
import random
from faker import Faker

from articles.models import Category, Article, Comment, Like
from users.models import CustomUser


class Command(BaseCommand):
    help = 'Charge des donn√©es de d√©monstration : utilisateurs, articles, commentaires et likes'

    def add_arguments(self, parser):
        parser.add_argument(
            '--users',
            type=int,
            default=10,
            help='Nombre d\'utilisateurs √† cr√©er (d√©faut: 10)'
        )
        parser.add_argument(
            '--articles',
            type=int,
            default=25,
            help='Nombre d\'articles √† cr√©er (d√©faut: 25)'
        )
        parser.add_argument(
            '--comments',
            type=int,
            default=50,
            help='Nombre de commentaires √† cr√©er (d√©faut: 50)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer la cr√©ation m√™me si des donn√©es existent d√©j√†'
        )

    def handle(self, *args, **options):
        fake = Faker(['fr_FR'])
        
        num_users = options['users']
        num_articles = options['articles']
        num_comments = options['comments']
        force = options['force']

        self.stdout.write("üöÄ Chargement des donn√©es de d√©monstration...\n")

        # V√©rifier si des cat√©gories existent
        if not Category.objects.exists():
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå Aucune cat√©gorie trouv√©e dans la base de donn√©es. '
                    'Ex√©cutez d\'abord "python manage.py load_categories"'
                )
            )
            return

        # V√©rifier si des donn√©es existent d√©j√†
        if not force and (CustomUser.objects.count() > 1 or Article.objects.exists()):
            self.stdout.write(
                self.style.WARNING(
                    '‚ö†Ô∏è Des donn√©es existent d√©j√† dans la base de donn√©es. '
                    'Utilisez --force pour forcer la cr√©ation.'
                )
            )
            return

        # 1. CR√âER LES UTILISATEURS
        self.stdout.write("üë• Cr√©ation des utilisateurs...")
        users = []
        
        # Cr√©er l'utilisateur admin s'il n'existe pas
        admin_user, created = CustomUser.objects.get_or_create(
            username='admin',
            defaults={
                'email': 'admin@example.com',
                'first_name': 'Administrateur',
                'last_name': 'Syst√®me',
                'is_staff': True,
                'is_superuser': True,
                'password': make_password('admin123')
            }
        )
        if created:
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ Utilisateur admin cr√©√© : admin/admin123")
            )
        users.append(admin_user)

        # Cr√©er les autres utilisateurs
        for i in range(num_users):
            username = fake.unique.user_name()
            first_name = fake.first_name()
            last_name = fake.last_name()
            email = fake.unique.email()
            
            user = CustomUser.objects.create(
                username=username,
                email=email,
                first_name=first_name,
                last_name=last_name,
                password=make_password('password123'),
                is_active=True
            )
            users.append(user)
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ Utilisateur cr√©√© : {username} ({first_name} {last_name})")
            )

        self.stdout.write(f"‚úÖ {len(users)} utilisateurs cr√©√©s\n")

        # 2. CR√âER LES ARTICLES
        self.stdout.write("üìù Cr√©ation des articles...")
        articles = []
        categories = list(Category.objects.all())
        
        # Contenu d'exemple pour les articles
        article_contents = [
            "Cet article explore les derni√®res avanc√©es technologiques qui r√©volutionnent notre quotidien. "
            "De l'intelligence artificielle aux √©nergies renouvelables, d√©couvrez comment l'innovation "
            "transforme notre monde.",
            
            "La science moderne nous r√©v√®le des secrets fascinants sur l'univers qui nous entoure. "
            "Des d√©couvertes r√©centes en astrophysique aux avanc√©es en biologie mol√©culaire, "
            "chaque jour apporte son lot de surprises.",
            
            "Prendre soin de sa sant√© est essentiel pour une vie √©quilibr√©e. "
            "Cet article vous propose des conseils pratiques et des informations "
            "pour maintenir votre bien-√™tre physique et mental.",
            
            "L'√©ducation est la cl√© d'un avenir prometteur. "
            "D√©couvrez les nouvelles m√©thodes d'apprentissage et les outils "
            "qui facilitent l'acquisition de connaissances.",
            
            "Partez √† la d√©couverte de destinations extraordinaires √† travers le monde. "
            "De la culture locale aux paysages √©poustouflants, "
            "chaque voyage est une aventure unique.",
            
            "La cuisine est un art qui r√©veille tous nos sens. "
            "Explorez des recettes traditionnelles et modernes "
            "qui vous feront voyager √† travers les saveurs du monde.",
            
            "Le sport est bien plus qu'une simple activit√© physique. "
            "Il d√©veloppe la discipline, la pers√©v√©rance et l'esprit d'√©quipe. "
            "D√©couvrez comment int√©grer le sport dans votre routine quotidienne.",
            
            "La musique a le pouvoir de toucher nos √¢mes et de transcender les fronti√®res. "
            "Explorez diff√©rents genres musicaux et d√©couvrez "
            "comment la musique influence notre humeur et notre cr√©ativit√©.",
            
            "Le cin√©ma nous transporte dans des mondes imaginaires et nous fait vivre "
            "des √©motions intenses. D√©couvrez les chefs-d'≈ìuvre du 7√®me art "
            "et leur impact sur notre culture.",
            
            "La litt√©rature ouvre les portes de l'imagination et nous permet "
            "d'explorer des univers infinis. Plongez dans des ≈ìuvres "
            "qui ont marqu√© l'histoire de la litt√©rature mondiale."
        ]

        for i in range(num_articles):
            # Choisir une cat√©gorie al√©atoire
            category = random.choice(categories)
            
            # Choisir un auteur al√©atoire
            author = random.choice(users)
            
            # Cr√©er un titre et un contenu
            title = fake.sentence(nb_words=6, variable_nb_words=True)
            content = random.choice(article_contents) + " " + fake.paragraph(nb_sentences=3)
            
            # Cr√©er des dates al√©atoires dans les 30 derniers jours
            days_ago = random.randint(0, 30)
            created_at = timezone.now() - timedelta(days=days_ago)
            
            article = Article.objects.create(
                title=title,
                content=content,
                author=author,
                category=category,
                created_at=created_at,
                updated_at=created_at
            )
            articles.append(article)
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ Article cr√©√© : '{title}' par {author.username}")
            )

        self.stdout.write(f"‚úÖ {len(articles)} articles cr√©√©s\n")

        # 3. CR√âER LES COMMENTAIRES
        self.stdout.write("üí¨ Cr√©ation des commentaires...")
        comment_contents = [
            "Excellent article, tr√®s instructif !",
            "Merci pour ces informations utiles.",
            "Je ne suis pas d'accord avec certains points, mais c'est int√©ressant.",
            "Tr√®s bien √©crit et facile √† comprendre.",
            "Cela m'a donn√© envie d'en savoir plus sur le sujet.",
            "Article passionnant, j'ai appris beaucoup de choses.",
            "Bonne approche du sujet, continuez comme √ßa !",
            "Je partage compl√®tement votre point de vue.",
            "Cela m'a fait r√©fl√©chir diff√©remment.",
            "Merci pour ce partage d'exp√©rience."
        ]

        for i in range(num_comments):
            # Choisir un article et un auteur al√©atoires
            article = random.choice(articles)
            author = random.choice(users)
            
            # Cr√©er un contenu de commentaire
            content = random.choice(comment_contents)
            
            # Cr√©er une date al√©atoire apr√®s la cr√©ation de l'article
            days_after_article = random.randint(0, 20)
            comment_date = article.created_at + timedelta(days=days_after_article)
            
            comment = Comment.objects.create(
                article=article,
                author=author,
                content=content,
                created_at=comment_date
            )
            
            if i % 10 == 0:  # Afficher un message tous les 10 commentaires
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ {i+1} commentaires cr√©√©s...")
                )

        self.stdout.write(f"‚úÖ {num_comments} commentaires cr√©√©s\n")

        # 4. CR√âER LES LIKES
        self.stdout.write("‚ù§Ô∏è Cr√©ation des likes...")
        likes_created = 0
        
        for article in articles:
            # Chaque article re√ßoit entre 0 et 8 likes
            num_likes = random.randint(0, 8)
            # Choisir des utilisateurs al√©atoires pour liker
            likers = random.sample(users, min(num_likes, len(users)))
            
            for liker in likers:
                like, created = Like.objects.get_or_create(
                    article=article,
                    user=liker
                )
                if created:
                    likes_created += 1
                    
        self.stdout.write(f"‚úÖ {likes_created} likes cr√©√©s\n")

        # 5. AFFICHER LE R√âSUM√â
        self.stdout.write("\n" + "="*50)
        self.stdout.write("üìä R√âSUM√â DES DONN√âES CR√â√âES")
        self.stdout.write("="*50)
        self.stdout.write(f"üë• Utilisateurs : {CustomUser.objects.count()}")
        self.stdout.write(f"üìù Articles : {Article.objects.count()}")
        self.stdout.write(f"üí¨ Commentaires : {Comment.objects.count()}")
        self.stdout.write(f"‚ù§Ô∏è Likes : {Like.objects.count()}")
        self.stdout.write(f"üè∑Ô∏è Cat√©gories : {Category.objects.count()}")
        self.stdout.write("="*50)
        
        self.stdout.write(
            self.style.SUCCESS(
                "\nüéâ Donn√©es de d√©monstration charg√©es avec succ√®s !"
            )
        )
        
        self.stdout.write("\nüîë Identifiants de connexion :")
        self.stdout.write("   Admin : admin/admin123")
        self.stdout.write("   Autres utilisateurs : username/password123")
        
        self.stdout.write("\nüåê Vous pouvez maintenant :")
        self.stdout.write("   1. D√©marrer le serveur : python manage.py runserver")
        self.stdout.write("   2. Acc√©der √† l'admin : http://127.0.0.1:8000/admin/")
        self.stdout.write("   3. Explorer vos articles et commentaires !")
